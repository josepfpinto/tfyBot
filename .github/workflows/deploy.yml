name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main  # Deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest  # Runs the workflow in a Linux environment

    steps:
    - uses: actions/checkout@v4  # Checks-out the repository

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names serverless-flask || aws ecr create-repository --repository-name serverless-flask

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-aws-account-id: true

    - name: Build and push
      id: docker-build
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ steps.login-ecr.outputs.registry }}/serverless-flask:latest

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'  # Set to the target Python version

    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --deploy --dev
        rm -rf node_modules package-lock.json
        npm install -g serverless
        npm install serverless-python-requirements

    # - name: Update function configuration
    #   run: |
    #     aws lambda update-function-configuration --function-name serverless-flask-dev-app --layers arn:aws:lambda:eu-west-1:${{ secrets.AWS_ACCOUNT_ID }}:layer:python-dependencies:1

    # - name: Package service
    #   run: npx serverless package

    # - name: Check size of deployment package
    #   run: du -sh .serverless/*

    # - name: Check size and number of files in unzipped deployment package
    #   run: |
    #     unzip .serverless/serverless-flask.zip -d unzipped
    #     du -sh unzipped
    #     find unzipped -type f | wc -l
    #     rm -rf unzipped

    - name: Get ECR URI
      id: ecr
      run: |
        echo "::set-output name=uri::$(aws ecr describe-repositories --repository-names serverless-flask --query 'repositories[0].repositoryUri' --output text)"

    - name: Deploy with Serverless
      env:
        IS_OFFLINE: false
        AWS_DEFAULT_REGION: 'eu-west-1'
        IS_DEBUG: ${{ env.IS_DEBUG }}
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
        SERPER_API_KEY: ${{ secrets.SERPER_API_KEY }}
        BRAVE_API_KEY: ${{ secrets.BRAVE_API_KEY }}
        TOKEN: ${{ secrets.TOKEN }}
        WHATSAPP_APP_ID: ${{ secrets.WHATSAPP_APP_ID }}
        WHATSAPP_APP_SECRET: ${{ secrets.WHATSAPP_APP_SECRET }}
        WHATSAPP_TOKEN: ${{ secrets.WHATSAPP_TOKEN }}
        WHATSAPP_RECIPIENT_WAID: ${{ secrets.WHATSAPP_RECIPIENT_WAID }}
        WHATSAPP_PHONE_NUMBER_ID: ${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
        WHATSAPP_VERSION: ${{ env.WHATSAPP_VERSION }}
        WHATSAPP_VERIFY_TOKEN: ${{ secrets.WHATSAPP_VERIFY_TOKEN }}
        LANGCHAIN_TRACING_V2: ${{ env.LANGCHAIN_TRACING_V2 }}
        LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
        LANGCHAIN_PROJECT: ${{ secrets.LANGCHAIN_PROJECT }}
        LANGCHAIN_ENDPOINT: ${{ env.LANGCHAIN_ENDPOINT }}
      run: |
        serverless deploy
