# serverless.yml

service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-dotenv-plugin

custom:
  usersTableName: "users-table-${self:provider.stage}"
  sessionsTableName: "sessions-table-${self:provider.stage}"
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: false
    usePipenv: true
  dynamodb:
    # stages:
    #   - dev
    start:
      # port: 8000
      # inMemory: true
      migrate: true # Automatically create/migrate tables on start
  serverless-offline:
    noPrependStageInUrl: true
    httpPort: 8080

provider:
  name: aws
  runtime: python3.11
  stage: dev
  region: eu-west-1
  environment:
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, ''}
    SERVERLESS_ACCESS_KEY: ${env:SERVERLESS_ACCESS_KEY, ''}
    PERPLEXITY_API_KEY: ${env:PERPLEXITY_API_KEY, ''}
    TAVILY_API_KEY: ${env:TAVILY_API_KEY, ''}
    SERPER_API_KEY: ${env:SERPER_API_KEY, ''}
    BRAVE_API_KEY: ${env:BRAVE_API_KEY, ''}
    TOKEN: ${env:TOKEN, ''}
    WHATSAPP_APP_ID: ${env:WHATSAPP_APP_ID, ''}
    WHATSAPP_APP_SECRET: ${env:WHATSAPP_APP_SECRET, ''}
    WHATSAPP_TOKEN: ${env:WHATSAPP_TOKEN, ''}
    WHATSAPP_RECIPIENT_WAID: ${env:WHATSAPP_RECIPIENT_WAID, ''}
    WHATSAPP_PHONE_NUMBER_ID: ${env:WHATSAPP_PHONE_NUMBER_ID, ''}
    WHATSAPP_VERSION: ${env:WHATSAPP_VERSION, ''}
    WHATSAPP_VERIFY_TOKEN: ${env:WHATSAPP_VERIFY_TOKEN, ''}
    IS_DEBUG: ${env:IS_DEBUG, ''}
    LANGCHAIN_TRACING_V2: ${env:LANGCHAIN_TRACING_V2, ''}
    LANGCHAIN_API_KEY: ${env:LANGCHAIN_API_KEY, ''}
    LANGCHAIN_PROJECT: ${env:LANGCHAIN_PROJECT, ''}
    LANGCHAIN_ENDPOINT: ${env:LANGCHAIN_ENDPOINT, ''}
    REGION: ${env:REGION, ''}
    USERS_TABLE: ${self:custom.usersTableName}
    SESSIONS_TABLE: ${self:custom.sessionsTableName}
  # profile: ${opt:profile, 'default'}  # Use the 'serverless deploy --profile serverless_admin' or defaults to 'default'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
        - { "Fn::GetAtt": ["SessionsDynamoDBTable", "Arn"] }
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.sessionsTableName}/index/SessionIdTimestampIndex"

functions:
  app:
    handler: wsgi_handler.handler
    timeout: 300 # set the timeout to 300 seconds
    events:
      - http: ANY /
      - http: "ANY {proxy+}"

resources:
  Resources:
    # UsersTable
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: phone_number
            AttributeType: S
        KeySchema:
          - AttributeName: phone_number
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 2
        TableName: ${self:custom.usersTableName}
    # SessionsTable
    SessionsDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: message_id
            AttributeType: S
          - AttributeName: session_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: message_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        TableName: ${self:custom.sessionsTableName}
        GlobalSecondaryIndexes:
          - IndexName: "SessionIdTimestampIndex"
            KeySchema:
              - AttributeName: "session_id"
                KeyType: "HASH"
              - AttributeName: "timestamp"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 2

package:
  include:
    - .venv/lib/python3.8/site-packages/pydantic/**
    - .venv/lib/python3.8/site-packages/pydantic_core/**
